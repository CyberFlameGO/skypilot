"""Local/On-premise."""
import os
import subprocess
import typing
from typing import Dict, Iterator, List, Optional, Tuple
import yaml

from sky import clouds

if typing.TYPE_CHECKING:
    # renaming to avoid shadowing variables
    from sky import resources as resources_lib

_LOCAL_YAML_PATH = '~/.sky/local/{}.yml'


def _run_output(cmd):
    proc = subprocess.run(cmd,
                          shell=True,
                          check=True,
                          stderr=subprocess.PIPE,
                          stdout=subprocess.PIPE)
    return proc.stdout.decode('ascii')


class Local(clouds.Cloud):
    """A local/on-premise cloud, also acting as a local cluster.

    This Cloud has the following special treatment of Cloud concepts:

    - Catalog: Does not have service catalog.
    - Region: Only one region ('Local' region).
    - Cost: Treats all compute/egress as free.
    - Instance types: Only one instance type ('on-prem' instance type).
    - Cluster: Each Local cloud corresponds to exactly 1 cluster.
    - Credentials: Checks if user provided credentials are correct.
    """

    LOCAL_REGION = clouds.Region('Local')
    _REPR = 'Local'
    _regions: List[clouds.Region] = [LOCAL_REGION]

    def __init__(self):
        self._local_cluster_name = Local._REPR

    def set_local_cluster_name(self, cluster: str):
        self._local_cluster_name = cluster

    @classmethod
    def regions(cls):
        return cls._regions

    @classmethod
    def region_zones_provision_loop(
        cls,
        *,
        instance_type: Optional[str] = None,
        accelerators: Optional[Dict[str, int]] = None,
        use_spot: bool,
    ) -> Iterator[Tuple[clouds.Region, List[clouds.Zone]]]:
        del accelerators  # unused
        assert instance_type is None and not use_spot
        for region in cls.regions():
            yield region, region.zones

    #### Normal methods ####

    def instance_type_to_hourly_cost(self, instance_type: str, use_spot: bool):
        # On-prem machines on Sky are assumed free
        # (minus electricity/utility bills)
        return 0.0

    def accelerators_to_hourly_cost(self, accelerators, use_spot):
        # Hourly cost of accelerators is 0 for local cloud
        return 0

    def get_egress_cost(self, num_gigabytes: float):
        # Egress cost to a local cluster is assumed to be 0
        return 0.0

    def __repr__(self):
        return self._local_cluster_name

    def is_same_cloud(self, other: clouds.Cloud):
        return isinstance(other, Local)

    @classmethod
    def get_default_instance_type(cls) -> str:
        # There is only "1" instance type for local cloud: on-prem
        return 'on-prem'

    @classmethod
    def get_accelerators_from_instance_type(
        cls,
        instance_type: str,
    ) -> Optional[Dict[str, int]]:
        # Because instance types do not exist for local clusters,
        # there are no associated accelerators for a given instance type
        return None

    def make_deploy_resources_variables(self,
                                        resources: 'resources_lib.Resources'):
        return {}

    def get_feasible_launchable_resources(self,
                                          resources: 'resources_lib.Resources'):
        return ([resources], [])

    def check_credentials(self) -> Tuple[bool, Optional[str]]:
        return True, None

    def get_credential_file_mounts(self) -> Tuple[Dict[str, str], List[str]]:
        # Credentials are not autogenerated by Sky
        # Credentials are instead provided by the user
        return {}, []

    def instance_type_exists(self, instance_type):
        # Checks if instance_type matches on-prem, the only instance type for
        # local cloud
        if instance_type == self.get_default_instance_type():
            return True
        return False

    def region_exists(self, region: str) -> bool:
        if region == Local.LOCAL_REGION.name:
            return True
        return False

    @staticmethod
    def get_local_cluster(cluster: str) -> 'Local':
        """Gets the local cluster object."""
        if not os.path.exists(
                os.path.expanduser(_LOCAL_YAML_PATH.format(cluster))):
            return None
        local_cloud = clouds.Local()
        local_cloud.set_local_cluster_name(cluster)
        return local_cloud

    def get_local_ips(self) -> List[str]:
        """Returns IP addresses of the local cluster"""
        cluster = self._local_cluster_name
        local_cluster_path = os.path.expanduser(
            _LOCAL_YAML_PATH.format(cluster))
        try:
            with open(local_cluster_path, 'r') as f:
                config = yaml.safe_load(f)
        except OSError as e:
            raise ValueError(
                f'Could not open/read file: {local_cluster_path}') from e

        ips = config['cluster']['ips']
        if isinstance(ips, str):
            ips = [ips]
        return ips

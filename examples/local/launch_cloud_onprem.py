import argparse
import os
import subprocess
import tempfile
import textwrap
import uuid
import yaml

from click import testing as cli_testing

from sky import cli
from sky import global_user_state
from sky.backends import onprem_utils
from sky.utils import common_utils

parser = argparse.ArgumentParser()
parser.add_argument('--local-cluster-name',
                    type=str,
                    required=True,
                    help='Name of the local cluster.')
args = parser.parse_args()

# Public and private keys (autogenerated by Sky)
public_key = '~/.ssh/sky-key.pub'
private_key = '~/.ssh/sky-key'

local_cluster_name = args.local_cluster_name

# Sky Task YAML to setup the user 'test'
sky_yaml_config = {
    'resources': {
        'cloud': 'aws'
    },
    'file_mounts': {
        '/user-key': public_key
    },
    'setup': textwrap.dedent("""\
              sudo adduser --disabled-password --gecos '' test
              sudo -H su test -c 'mkdir ~/.ssh'
              sudo -H su test -c 'chmod 700 ~/.ssh'
              sudo -H su test -c 'touch ~/.ssh/authorized_keys'
              sudo -H su test -c 'chmod 600 ~/.ssh/authorized_keys'
              sudo -H su test -c 'cat /user-key >> ~/.ssh/authorized_keys'
            """)
}

cli_runner = cli_testing.CliRunner()
# onprem_name = f'onprem-cluster-{uuid.uuid4().hex[:6]}'
# with tempfile.NamedTemporaryFile(suffix='.yaml', mode='w') as f:
#     yaml.dump(sky_yaml_config, f)
#     file_path = f.name
#     cli_runner.invoke(cli.launch, ['-c', onprem_name, file_path])

onprem_name = 'onprem-cluster-246835'
handle = global_user_state.get_handle_from_cluster_name(onprem_name)
head_ip = handle.head_ip

# Cluster config YAML to setup Sky Onprem on the admin account 'ubuntu'
cluster_yaml_config = {
    'cluster': {
        'ips': [head_ip],
        'name': local_cluster_name
    },
    'auth': {
        'ssh_user': 'ubuntu',
        'ssh_private_key': private_key
    }
}

with tempfile.NamedTemporaryFile(suffix='.yaml', mode='w') as f:
    yaml.dump(cluster_yaml_config, f)
    file_path = f.name
    subprocess.run(f'sky admin deploy {file_path}', shell=True, check=True)

# Fill out the local config file in ~/.sky/local/...
local_config = onprem_utils.get_local_cluster_config_or_error(
    local_cluster_name)
local_config['auth']['ssh_user'] = 'test'
local_config['auth']['ssh_private_key'] = private_key
local_config_path = onprem_utils.SKY_USER_LOCAL_CONFIG_PATH.format(
    local_cluster_name)
common_utils.dump_yaml(os.path.expanduser(local_config_path), local_config)
